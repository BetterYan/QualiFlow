@page "/login"

@using Microsoft.AspNetCore.Components.Authorization
@using QualiFlow.Identity.Component.Contracts
@using QualiFlow.Identity.Component.Pages.Models
@using QualiFlow.Identity.Component.Services
@using QualiFlow.Identity.Core
@using QualiFlow.Identity.Core.Models

@attribute [AllowAnonymous]

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJwtAccessor JwtAccessor
@inject ISnackbar Snackbar
@inject IHttpClientFactory httpClientFactory

<MudText Typo="Typo.h5">Login</MudText>

<EditForm Model="_loginModel" OnValidSubmit="TryLogin">
    <div class="d-flex flex-column">
        <DataAnnotationsValidator />
        <MudTextField Label="Username" @bind-Value="_loginModel.UserName" Required="true" Variant="Variant.Outlined" />
        <MudTextField Label="Password" @bind-Value="_loginModel.Password" Required="true" Variant="Variant.Outlined" InputType="InputType.Password" />
        <MudCheckBox T="bool" Label="Remember me" @bind-Value="_loginModel.Remember" />
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Login</MudButton>
    </div>
</EditForm>

@code {
    private readonly LoginModel _loginModel = new LoginModel();

    private async Task TryLogin()
    {
        var isValid = await ValidateCredentials(_loginModel.UserName, _loginModel.Password);
        if (!isValid)
        {
            Snackbar.Add("Invalid credentials. Please try again", Severity.Error);
            return;
        }

        ((AccessTokenAuthenticationStateProvider)AuthenticationStateProvider).NotifyAuthenticationStateChanged();
        NavigationManager.NavigateTo("", true);
    }

    private async Task<bool> ValidateCredentials(string username, string password)
    {
        if (string.IsNullOrEmpty(username) && string.IsNullOrEmpty(password))
            return false;
        using var httpClient = httpClientFactory.CreateClient("normal");
        var resp = await httpClient.PostAsJsonAsync(NavigationManager.BaseUri + "api/v1/Identity/Login", new LoginRequest(username, password));

        if (!resp.IsSuccessStatusCode)
        {
            return false;
        }
        var result = await resp.Content.ReadFromJsonAsync<LoginResponse>();

        if (!result.IsAuthenticated)
            return false;

        await JwtAccessor.WriteTokenAsync(TokenNames.AccessToken, result.AccessToken!);
        await JwtAccessor.WriteTokenAsync(TokenNames.RefreshToken, result.RefreshToken!);
        return true;
    }
}